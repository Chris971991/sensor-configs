substitutions:
  name: bed-presence
  friendly_name: Bed Presence

  # Auto Calibrate Trigger Percentile
  # This controls how the trigger threshold is set when auto calibration is enabled. This is the percentage of the
  # observed pressure that is required to register the bed as occupied. During auto calibration, the system stores the
  # minimum and maximum pressures that it sees and used those values in combination with the trigger_percentile to
  # calculate the trigger threshold.
  #     - 0.9    Less sensitive, requires 90% of the maximum measured pressure to trigger (Default)
  #     - 0.50   Set trigger exactly in the middle of minimum and maximum measured pressures
  #     - 0.20   More sensitive, likely to be triggered by partner
  trigger_percentile: '0.90'
  workflow_test: '7'

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  project:
    name: ElevatedSensors.BedPresence
    version: mk1

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Allow Import
dashboard_import:
  package_import_url: github://ElevatedSensors/sensor-configs/bed-presence-mk1.yaml@main
  import_full_config: true

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

# Enable esphome OTA updates
ota:
  platform: esphome

## Managed Updates from Elevated Sensors
#ota:
#- platform: http_request
#
#http_request:
#  verify_ssl: false
#
#update:
#  - platform: http_request
#    name: Firmware Update
#    source: https://dev.elevatedsensors.com/sensor-configs-/manifest.json
#    update_interval: 6h

################################################################################
# Sensor Configs

binary_sensor:
- platform: template
  name: Bed Occupied Left (Fast)
  id: bed_occupied_left_fast
  device_class: occupancy
  icon: mdi:bed
  filters:
  - delayed_off: 750ms    # prevent shifting in bed from registering "off"
  lambda: |-  # Check current state against trigger value
    if (id(bed_sensor_left).state > id(val_trigger_left).state) {
      return true;
    } else {
      return false;
    }
- platform: template
  name: Bed Occupied Right (Fast)
  id: bed_occupied_right_fast
  device_class: occupancy
  icon: mdi:bed
  filters:
  - delayed_off: 750ms     # prevent shifting in bed from registering "off"
  lambda: |-  # Check current state against trigger value
    if (id(bed_sensor_right).state > id(val_trigger_right).state) {
      return true;
    } else {
      return false;
    }
- platform: template
  name: Bed Occupied Left
  id: bed_occupied_left
  device_class: occupancy
  icon: mdi:bed
  filters:
  - delayed_on_off: 2s      # ensure stability
  lambda: return id(bed_occupied_left_fast).state;
- platform: template
  name: Bed Occupied Right
  id: bed_occupied_right
  device_class: occupancy
  icon: mdi:bed
  filters:
  - delayed_on_off: 2s      # ensure stability
  lambda: return id(bed_occupied_right_fast).state;

sensor:
- platform: pulse_counter
  pin: GPIO10
  name: Left Pressure (Current)
  id: bed_sensor_left
  update_interval: 0.5s
  unit_of_measurement: '%'
  icon: mdi:gauge
  filters:
  #- sliding_window_moving_average:
  #    window_size: 10             # average over 10 samples/5 seconds (0.5s update_interval)
  #    send_every: 1               # send every 0.5s
  - calibrate_linear:             # scale pulses/minute to 0->100%
      method: least_squares
      datapoints:
        - 408000 -> 100.0         # 6800Hz (sensor shorted/0ohms)
        - 276000 -> 0.0           # 4600Hz (breakforce/10k)
  - clamp:
      max_value: 100.0
      min_value: 0.0
  - or:
    - delta: 0.1                  # only send if sensor changes by +/-0.1% (eliminate sensor noise)
    - throttle: 60s               # but still update every minute
  on_value:
    then:
    - lambda: |-  # Update min/max measured pressures
        if (x > id(val_max_left).state) {
            auto call = id(val_max_left).make_call();
            call.set_value(x);
            call.perform();
        }
        if (x < id(val_min_left).state) {
            auto call = id(val_min_left).make_call();
            call.set_value(x);
            call.perform();
        }
- platform: pulse_counter
  pin: GPIO20
  name: Right Pressure (Current)
  id: bed_sensor_right
  update_interval: 0.5s
  unit_of_measurement: '%'
  icon: mdi:gauge
  filters:
  #- sliding_window_moving_average:
  #   window_size: 10             # average over 10 samples/5 seconds (0.5s update_interval)
  #    send_every: 1               # send every 0.5s
  - calibrate_linear:             # scale pulses/minute to 0->100%
      method: least_squares
      datapoints:
        - 408000 -> 100.0         # 6800Hz (sensor shorted/0ohms)
        - 276000 -> 0.0           # 4600Hz (breakforce/10k)
  - clamp:
      max_value: 100.0
      min_value: 0.0
  - or:
    - delta: 0.1                  # only send if sensor changes by +/-0.1% (eliminate sensor noise)
    - throttle: 60s               # but still update every minute
  on_value:
    then:
    - lambda: |-  # Update min/max measured pressures
        if (x > id(val_max_right).state) {
            auto call = id(val_max_right).make_call();
            call.set_value(x);
            call.perform();
        }
        if (x < id(val_min_right).state) {
            auto call = id(val_min_right).make_call();
            call.set_value(x);
            call.perform();
        }
- platform: template
  name: Left Pressure (Min)
  id: val_min_status_left
  icon: mdi:gauge-empty
  unit_of_measurement: '%'
  entity_category: diagnostic
- platform: template
  name: Left Pressure (Max)
  id: val_max_status_left
  icon: mdi:gauge-full
  unit_of_measurement: '%'
  entity_category: diagnostic
- platform: template
  name: Right Pressure (Min)
  id: val_min_status_right
  icon: mdi:gauge-empty
  unit_of_measurement: '%'
  entity_category: diagnostic
- platform: template
  name: Right Pressure (Max)
  id: val_max_status_right
  icon: mdi:gauge-full
  unit_of_measurement: '%'
  entity_category: diagnostic
- platform: wifi_signal # Reports the WiFi signal strength in dB
  name: WiFi Signal dB
  id: wifi_signal_db
  update_interval: 60s
- platform: copy # Reports the WiFi signal strength in %
  source_id: wifi_signal_db
  name: "WiFi Signal Percent"
  filters:
    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
  unit_of_measurement: "%"
  entity_category: "diagnostic"
  device_class: ""

number:
- platform: template
  id: val_min_left
  optimistic: true
  restore_value: true
  initial_value: 100
  min_value: 0
  max_value: 100
  step: 0.1
  on_value:
    then:
    - lambda: |-  # Update status and trigger (if auto calibrating)
        id(val_min_status_left).publish_state(x);
        if (id(calibrate_auto_left).state) {
          id(update_trigger_left)->execute();
        }
- platform: template
  id: val_max_left
  optimistic: true
  restore_value: true
  initial_value: 0
  min_value: 0
  max_value: 100
  step: 0.1
  on_value:
    then:
    - lambda: |-  # Update status and trigger (if auto calibrating)
        id(val_max_status_left).publish_state(x);
        if (id(calibrate_auto_left).state) {
          id(update_trigger_left)->execute();
        }
- platform: template
  name: Left Trigger Pressure
  id: val_trigger_left
  optimistic: true
  restore_value: true
  initial_value: 50
  min_value: 0
  max_value: 100
  step: 0.1
  icon: mdi:gauge
  unit_of_measurement: '%'
  entity_category: config
- platform: template
  id: val_min_right
  optimistic: true
  restore_value: true
  initial_value: 100
  min_value: 0
  max_value: 100
  step: 0.1
  on_value:
    then:
    - lambda: |-  # Update status and trigger (if auto calibrating)
        id(val_min_status_right).publish_state(x);
        if (id(calibrate_auto_right).state) {
          id(update_trigger_right)->execute();
        }
- platform: template
  id: val_max_right
  optimistic: true
  restore_value: true
  initial_value: 0
  min_value: 0
  max_value: 100
  step: 0.1
  on_value:
    then:
    - lambda: |-  # Update status and trigger (if auto calibrating)
        id(val_max_status_right).publish_state(x);
        if (id(calibrate_auto_right).state) {
          id(update_trigger_right)->execute();
        }
- platform: template
  name: Right Trigger Pressure
  id: val_trigger_right
  optimistic: true
  restore_value: true
  initial_value: 50
  min_value: 0
  max_value: 100
  step: 0.1
  icon: mdi:gauge
  unit_of_measurement: '%'
  entity_category: config

button:
- platform: template
  name: Calibration Left (Reset)
  id: calibration_left_reset
  icon: mdi:sync
  entity_category: config
  on_press:
    then:
    - number.set:
        id: val_min_left
        value: 100
    - number.set:
        id: val_max_left
        value: 0
    - number.set:
        id: val_trigger_left
        value: 50
- platform: template
  name: Calibration Right (Reset)
  id: calibration_right_reset
  icon: mdi:sync
  entity_category: config
  on_press:
    then:
    - number.set:
        id: val_min_right
        value: 100
    - number.set:
        id: val_max_right
        value: 0
    - number.set:
        id: val_trigger_right
        value: 50

switch:
- platform: template
  name: Calibration Left (Auto)
  id: calibrate_auto_left
  optimistic: true
  icon: mdi:auto-fix
  restore_mode: ALWAYS_OFF
  turn_on_action:
  - button.press: calibration_left_reset
  entity_category: config
- platform: template
  name: Calibration Right (Auto)
  id: calibrate_auto_right
  optimistic: true
  icon: mdi:auto-fix
  restore_mode: ALWAYS_OFF
  turn_on_action:
  - button.press: calibration_right_reset
  entity_category: config
- platform: restart
  name: Restart

script:
- id: update_trigger_left
  mode: queued
  then:
  - lambda: |-  # Set trigger to x% of difference between min/max
      float min_pressure = id(val_min_left).state;
      float max_pressure = id(val_max_left).state;
      if (min_pressure <= max_pressure) {
          // calculate new trigger value
          float trigger_pressure = min_pressure + ((max_pressure - min_pressure) * float(${trigger_percentile}));

          // round to 2 decimal places
          trigger_pressure = round(trigger_pressure * 100)/100.0;

          // set value
          auto call = id(val_trigger_left).make_call();
          call.set_value(trigger_pressure);
          call.perform();
      }

- id: update_trigger_right
  mode: queued
  then:
  - lambda: |-  # Set trigger to x% of difference between min/max
      float min_pressure = id(val_min_right).state;
      float max_pressure = id(val_max_right).state;
      if (min_pressure <= max_pressure) {
          // calculate new trigger value
          float trigger_pressure = min_pressure + ((max_pressure - min_pressure) * float(${trigger_percentile}));

          // round to 2 decimal places
          trigger_pressure = round(trigger_pressure * 100)/100.0;

          // set value
          auto call = id(val_trigger_right).make_call();
          call.set_value(trigger_pressure);
          call.perform();
      }
